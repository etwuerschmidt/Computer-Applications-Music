/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
Mu45effectAudioProcessorEditor::Mu45effectAudioProcessorEditor (Mu45effectAudioProcessor& p)
    : AudioProcessorEditor (&p), processor (p)
{
    PluginParameter* paramV;
	PluginParameter* paramB;
    
    //Mu45Param: Create a slider for each User Param
    paramV = processor.volumeUParam;
    volumeSlider = new Slider ("Volume Slider");
    volumeSlider->setRange(-96.0,
                           10.0,
                           1.0);        //Mu45:  step size
    volumeSlider->setSliderStyle(Slider::LinearBarVertical);
    volumeSlider->setTextValueSuffix(paramV->getLabel());
    volumeSlider->setTextBoxStyle(Slider::TextBoxBelow, false, 60, 20);
    volumeSlider->addListener (this);
    addAndMakeVisible(volumeSlider);
    
    //Mu45Param: You can also create a label for your slider if you like
    volumeLabel = new Label("Volume Label", paramV->getName(10));
    volumeLabel->attachToComponent(volumeSlider, false);
    //volumeLabel->setFont(Font(12.0));
    addAndMakeVisible(volumeLabel);

	//Balance Param
	paramB = processor.balanceUParam;
	balanceSlider = new Slider("Balance Slider");
	balanceSlider->setRange(-50.0,
		50.0,
		1.0);        //Mu45:  step size
	balanceSlider->setSliderStyle(Slider::RotaryHorizontalDrag);
	balanceSlider->setTextValueSuffix(paramB->getLabel());
	balanceSlider->setTextBoxStyle(Slider::TextBoxBelow, false, 60, 20);
	balanceSlider->addListener(this);
	addAndMakeVisible(balanceSlider);

	//Mu45Param: You can also create a label for your slider if you like
	balanceLabel = new Label("Balance Label", paramB->getName(10));
	balanceLabel->attachToComponent(balanceSlider, false);
	//volumeLabel->setFont(Font(12.0));
	addAndMakeVisible(balanceLabel);
    
    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be.
    setSize (400, 300);
    startTimer(100);    // This sets how often (in msec) the timerCallback() gets called.
}

Mu45effectAudioProcessorEditor::~Mu45effectAudioProcessorEditor()
{
}

//==============================================================================
void Mu45effectAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colours::white);

    g.setColour (Colours::black);
    g.setFont (15.0f);
    //g.drawFittedText ("Hello Mu45!", getLocalBounds(), Justification::centred, 1);
}

void Mu45effectAudioProcessorEditor::resized()
{
    //Mu45Param: Set the location in the GUI for each UI component
    int w = 50; int h = 200; int x = 20; int y = 60;
    volumeSlider->setBounds(x, y, w, h);    

	balanceSlider->setBounds(100, 150, 80, 80);
}

//Mu45: This gets called whenever the user moves a slider
void Mu45effectAudioProcessorEditor::sliderValueChanged(Slider* slider)
{
    PluginParameter* parameter = nullptr;
    
    // Mu45Param: make an additional "else if" for each slider
    if (slider == volumeSlider) {
        parameter = processor.volumeUParam;
    }
    else if (slider == balanceSlider) {
        parameter = processor.balanceUParam;
    }
    
    if (parameter != nullptr) {
        parameter->setValueNotifyingHost(parameter->calculateValue(slider->getValue()));
    }
}

//Mu45:  This gets called every N msec so that sliders can update their value if the host changed them using parameter automation
void Mu45effectAudioProcessorEditor::timerCallback()
{
    //Mu45Param: Update the value of each slider to match the value in the Processor
    volumeSlider->setValue(processor.volumeUParam->getActualValue(), dontSendNotification);
    balanceSlider->setValue(processor.balanceUParam->getActualValue(), dontSendNotification);
}



