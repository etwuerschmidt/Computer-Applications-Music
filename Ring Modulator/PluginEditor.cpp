/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================

// PluginEditor Constructor:
Mu45effectAudioProcessorEditor::Mu45effectAudioProcessorEditor (Mu45effectAudioProcessor& p)
    : AudioProcessorEditor (&p), processor (p)
{
    PluginParameter* param;
    
    addAndMakeVisible (Rate = new Slider ("Rate"));
    Rate->setRange (60, 4000, 1);
    Rate->setSliderStyle (Slider::Rotary);
    Rate->setTextBoxStyle (Slider::TextBoxBelow, false, 80, 20);
	Rate->setTextValueSuffix(" Hz");
    Rate->addListener (this);

    addAndMakeVisible (Phase = new Slider ("Phase"));
    Phase->setRange (0, 180, 1);
    Phase->setSliderStyle (Slider::Rotary);
    Phase->setTextBoxStyle (Slider::TextBoxBelow, false, 80, 20);
	Phase->setTextValueSuffix(" Degrees");
    Phase->addListener (this);

    addAndMakeVisible (WetDry = new Slider ("WetDry"));
    WetDry->setRange (0, 100, 0.1);
    WetDry->setSliderStyle (Slider::Rotary);
    WetDry->setTextBoxStyle (Slider::TextBoxBelow, false, 80, 20);
	WetDry->setTextValueSuffix("%");
    WetDry->addListener (this);

    addAndMakeVisible (Waveform = new ComboBox ("Waveform"));
    Waveform->setEditableText (false);
    Waveform->setJustificationType (Justification::centredLeft);
    Waveform->setTextWhenNothingSelected ("Sine");
    Waveform->setTextWhenNoChoicesAvailable (TRANS("(no choices)"));
    Waveform->addItem (TRANS("Sine "), 1);
    Waveform->addItem (TRANS("Triangle"), 2);
    Waveform->addListener (this);

    addAndMakeVisible (Rate2 = new Label ("Rate",
                                          TRANS("Frequency")));
    Rate2->setFont (Font (15.00f, Font::plain));
    Rate2->setJustificationType (Justification::centredLeft);
    Rate2->setEditable (false, false, false);
    Rate2->setColour (TextEditor::textColourId, Colours::black);
    Rate2->setColour (TextEditor::backgroundColourId, Colour (0x00000000));

    addAndMakeVisible (Phase2 = new Label ("Phase",
                                           TRANS("Phase")));
    Phase2->setFont (Font (15.00f, Font::plain));
    Phase2->setJustificationType (Justification::centredLeft);
    Phase2->setEditable (false, false, false);
    Phase2->setColour (TextEditor::textColourId, Colours::black);
    Phase2->setColour (TextEditor::backgroundColourId, Colour (0x00000000));

    addAndMakeVisible (label = new Label ("new label",
                                          TRANS("Wet / Dry")));
    label->setFont (Font (15.00f, Font::plain));
    label->setJustificationType (Justification::centredLeft);
    label->setEditable (false, false, false);
    label->setColour (TextEditor::textColourId, Colours::black);
    label->setColour (TextEditor::backgroundColourId, Colour (0x00000000));

    addAndMakeVisible (Waveform2 = new Label ("Waveform",
                                              TRANS("Waveform")));
    Waveform2->setFont (Font (15.00f, Font::plain));
    Waveform2->setJustificationType (Justification::centredLeft);
    Waveform2->setEditable (false, false, false);
    Waveform2->setColour (TextEditor::textColourId, Colours::black);
    Waveform2->setColour (TextEditor::backgroundColourId, Colour (0x00000000));

    addAndMakeVisible (PreFilt = new ComboBox ("PreFilt"));
    PreFilt->setEditableText (false);
    PreFilt->setJustificationType (Justification::centredLeft);
    PreFilt->setTextWhenNothingSelected ("None");
    PreFilt->setTextWhenNoChoicesAvailable (TRANS("(no choices)"));
    PreFilt->addItem (TRANS("Low Pass"), 1);
    PreFilt->addItem (TRANS("Band Pass"), 2);
    PreFilt->addItem (TRANS("High Pass"), 3);
	PreFilt->addItem (TRANS("None"), 4);
    PreFilt->addListener (this);

    addAndMakeVisible (PostFilt = new ComboBox ("PostFilt"));
    PostFilt->setEditableText (false);
    PostFilt->setJustificationType (Justification::centredLeft);
    PostFilt->setTextWhenNothingSelected ("None");
    PostFilt->setTextWhenNoChoicesAvailable (TRANS("(no choices)"));
    PostFilt->addItem (TRANS("Low Pass"), 1);
    PostFilt->addItem (TRANS("Band Pass"), 2);
    PostFilt->addItem (TRANS("High Pass"), 3);
	PostFilt->addItem(TRANS("None"), 4);
    PostFilt->addListener (this);

    addAndMakeVisible (PreFilter = new Label ("PreFilter",
                                              TRANS("Pre-Modulation Filter")));
    PreFilter->setFont (Font (15.00f, Font::plain));
    PreFilter->setJustificationType (Justification::centredLeft);
    PreFilter->setEditable (false, false, false);
    PreFilter->setColour (TextEditor::textColourId, Colours::black);
    PreFilter->setColour (TextEditor::backgroundColourId, Colour (0x00000000));

    addAndMakeVisible (PostFilter = new Label ("PostFilter",
                                              TRANS("Post-Modulation Filter")));
    PostFilter->setFont (Font (15.00f, Font::plain));
    PostFilter->setJustificationType (Justification::centredLeft);
    PostFilter->setEditable (false, false, false);
    PostFilter->setColour (TextEditor::textColourId, Colours::black);
    PostFilter->setColour (TextEditor::backgroundColourId, Colour (0x00000000));
    

    //[UserPreSize]
    //[/UserPreSize]

    setSize (400, 300);
    startTimer(100);    // This sets how often (in msec) the timerCallback() gets called.
}

Mu45effectAudioProcessorEditor::~Mu45effectAudioProcessorEditor()
{
}

//==============================================================================
void Mu45effectAudioProcessorEditor::paint(Graphics& g)
{
	g.fillAll(Colours::white);
}

void Mu45effectAudioProcessorEditor::resized()
{
    Rate->setBounds (32, 24, 100, 75);
    Phase->setBounds (140, 24, 100, 75);
    WetDry->setBounds (248, 24, 100, 75);
    Waveform->setBounds (160, 176, 150, 24);
    Rate2->setBounds (48, 96, 75, 24);
    Phase2->setBounds (168, 96, 75, 24);
    label->setBounds (264, 96, 75, 24);
    Waveform2->setBounds (80, 176, 75, 24);
    PreFilt->setBounds (160, 136, 150, 24);
    PostFilt->setBounds (160, 216, 150, 24);
    PreFilter->setBounds (40, 136, 115, 24);
    PostFilter->setBounds (40, 216, 115, 24);
}

//Mu45: This gets called whenever the user moves a slider
void Mu45effectAudioProcessorEditor::sliderValueChanged(Slider* slider)
{
    PluginParameter* parameter = nullptr;
    
    // Mu45Param: make an additional "else if" for each slider
    if (slider == WetDry) {
        parameter = processor.wetDryUParam;
    }
    else if (slider == Rate) {
        parameter = processor.rateUParam;
    }
	else if (slider == Phase) {
		parameter = processor.phaseUParam;
	}
    
    if (parameter != nullptr) {
        parameter->setValueNotifyingHost(parameter->calculateValue(slider->getValue()));
    }
}

void Mu45effectAudioProcessorEditor::comboBoxChanged (ComboBox* comboBoxThatHasChanged)
{
    //[UsercomboBoxChanged_Pre]
    //[/UsercomboBoxChanged_Pre]

	PluginParameter* parameterPreFilt = nullptr;
	PluginParameter* parameterPostFilt = nullptr;

    if (comboBoxThatHasChanged == Waveform)
    {
		if ((int)Waveform->getSelectedId() == 1) {
			processor.lfoL.setType(1); processor.lfoR.setType(1);
		}
		else if ((int)Waveform->getSelectedId() == 2) {
			processor.lfoL.setType(2); processor.lfoR.setType(2);
		}

    }
	else if (comboBoxThatHasChanged == PreFilt)
	{
		if ((int)PreFilt->getSelectedId() == 1)
		{
			processor.preFiltUParam->setName("Low Pass");
			parameterPreFilt = processor.preFiltUParam;
		}
		else if ((int)PreFilt->getSelectedId() == 2)
		{
			processor.preFiltUParam->setName("High Pass");
			parameterPreFilt = processor.preFiltUParam;
		}
		else if ((int)PreFilt->getSelectedId() == 3)
		{
			processor.preFiltUParam->setName("Band Pass");
			parameterPreFilt = processor.preFiltUParam;
		}
		else
		{
			processor.preFiltUParam->setName("None");
			parameterPreFilt = processor.preFiltUParam;
		}
	}
	else if (comboBoxThatHasChanged == PostFilt)
	{
		if ((int)PostFilt->getSelectedId() == 1)
		{
			processor.postFiltUParam->setName("Low Pass");
			parameterPostFilt = processor.postFiltUParam;
		}
		else if ((int)PostFilt->getSelectedId() == 2)
		{
			processor.postFiltUParam->setName("High Pass");
			parameterPostFilt = processor.postFiltUParam;
		}
		else if ((int)PostFilt->getSelectedId() == 3)
		{
			processor.postFiltUParam->setName("Band Pass");
			parameterPostFilt = processor.postFiltUParam;
		}
		else
		{
			processor.postFiltUParam->setName("None");
			parameterPostFilt = processor.postFiltUParam;
		}
	}

    //[UsercomboBoxChanged_Post]
    //[/UsercomboBoxChanged_Post]
}

    
    //Mu45:  This gets called every N msec so that sliders can update their value if the host changed them using parameter automation
void Mu45effectAudioProcessorEditor::timerCallback()
{
	WetDry->setValue(processor.wetDryUParam->getActualValue(), dontSendNotification);
	Rate->setValue(processor.rateUParam->getActualValue(), dontSendNotification);
	Phase->setValue(processor.phaseUParam->getActualValue(), dontSendNotification);
}



