/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================

// PluginEditor Constructor:
Mu45effectAudioProcessorEditor::Mu45effectAudioProcessorEditor (Mu45effectAudioProcessor& p)
    : AudioProcessorEditor (&p), processor (p)
{
    PluginParameter* param;
	param = processor.delayUParam;
    
    //    param = processor.volumeUParam;     // get the corresponding parameter from the PluginProcessor

    
    addAndMakeVisible (drywet = new Slider ("drywet"));
    drywet->setRange (0, 100, 0.1);
    drywet->setSliderStyle (Slider::Rotary);
    drywet->setTextBoxStyle (Slider::TextBoxBelow, false, 80, 20);
	drywet->setTextValueSuffix("%");
    drywet->addListener (this);

    addAndMakeVisible (feedback = new Slider ("feedback"));
    feedback->setRange (0, 95, 0.1);
    feedback->setSliderStyle (Slider::Rotary);
    feedback->setTextBoxStyle (Slider::TextBoxBelow, false, 80, 20);
	feedback->setTextValueSuffix("%");
    feedback->addListener (this);

    addAndMakeVisible (depth = new Slider ("depth"));
    depth->setRange (0, (param->getActualValue() > 5.0) ? 10.0 - param->getActualValue() : param->getActualValue(), 0.1);
    depth->setSliderStyle (Slider::Rotary);
    depth->setTextBoxStyle (Slider::TextBoxBelow, false, 80, 20);
	depth->setTextValueSuffix("ms");
    depth->addListener (this);

    addAndMakeVisible (rate = new Slider ("rate"));
    rate->setRange (0, 10, 0.1);
    rate->setSliderStyle (Slider::Rotary);
    rate->setTextBoxStyle (Slider::TextBoxBelow, false, 80, 20);
	rate->setTextValueSuffix("Hz");
    rate->addListener (this);

    addAndMakeVisible (delay = new Slider ("delay"));
    delay->setRange (0, 10, 0.1);
    delay->setSliderStyle (Slider::LinearBar);
    delay->setTextBoxStyle (Slider::TextBoxLeft, false, 80, 20);
	delay->setTextValueSuffix("ms");
    delay->addListener (this);

    addAndMakeVisible (drywet2 = new Label ("drywet",
                                            TRANS("Dry / Wet")));
    drywet2->setFont (Font (15.00f, Font::plain));
    drywet2->setJustificationType (Justification::centredLeft);
    drywet2->setEditable (false, false, false);
    drywet2->setColour (TextEditor::textColourId, Colours::black);
    drywet2->setColour (TextEditor::backgroundColourId, Colour (0x00000000));

    addAndMakeVisible (feedback2 = new Label ("feedback",
                                              TRANS("Feedback")));
    feedback2->setFont (Font (15.00f, Font::plain));
    feedback2->setJustificationType (Justification::centredLeft);
    feedback2->setEditable (false, false, false);
    feedback2->setColour (TextEditor::textColourId, Colours::black);
    feedback2->setColour (TextEditor::backgroundColourId, Colour (0x00000000));

    addAndMakeVisible (delay2 = new Label ("delay",
                                           TRANS("Delay Time")));
    delay2->setFont (Font (15.00f, Font::plain));
    delay2->setJustificationType (Justification::centredLeft);
    delay2->setEditable (false, false, false);
    delay2->setColour (TextEditor::textColourId, Colours::black);
    delay2->setColour (TextEditor::backgroundColourId, Colour (0x00000000));

    addAndMakeVisible (depth2 = new Label ("depth",
                                           TRANS("Depth")));
    depth2->setFont (Font (15.00f, Font::plain));
    depth2->setJustificationType (Justification::centredLeft);
    depth2->setEditable (false, false, false);
    depth2->setColour (TextEditor::textColourId, Colours::black);
    depth2->setColour (TextEditor::backgroundColourId, Colour (0x00000000));

    addAndMakeVisible (rate2 = new Label ("rate",
                                          TRANS("Rate")));
    rate2->setFont (Font (15.00f, Font::plain));
    rate2->setJustificationType (Justification::centredLeft);
    rate2->setEditable (false, false, false);
    rate2->setColour (TextEditor::textColourId, Colours::black);
    rate2->setColour (TextEditor::backgroundColourId, Colour (0x00000000));
  
    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be.*/
    setSize (400, 400);
    startTimer(100);    // This sets how often (in msec) the timerCallback() gets called.
}

Mu45effectAudioProcessorEditor::~Mu45effectAudioProcessorEditor()
{
}

//==============================================================================
void Mu45effectAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colours::white);

    g.setColour (Colours::black);
    g.setFont (15.0f);
}

void Mu45effectAudioProcessorEditor::resized()
{ 
    drywet->setBounds (32, 24, 150, 80);
    feedback->setBounds (184, 24, 150, 80);
    depth->setBounds (32, 216, 150, 80);
    rate->setBounds (184, 216, 150, 80);
    delay->setBounds (112, 152, 150, 24);
    drywet2->setBounds (72, 104, 75, 24);
    feedback2->setBounds (224, 104, 75, 24);
    delay2->setBounds (144, 176, 80, 24);
    depth2->setBounds (80, 296, 75, 24);
    rate2->setBounds (240, 296, 75, 24);
}

//Mu45: This gets called whenever the user moves a slider
void Mu45effectAudioProcessorEditor::sliderValueChanged(Slider* slider)
{
    PluginParameter* parameter = nullptr;
    
    if (slider == drywet)
    {
		parameter = processor.wetDryUParam;
    }
    else if (slider == feedback)
    {
		parameter = processor.feedbackUParam;
    }
    else if (slider == depth)
    {
		parameter = processor.depthUParam;
    }
    else if (slider == rate)
    {
		parameter = processor.rateUParam;
    }
    else if (slider == delay)
    {
		parameter = processor.delayUParam;
		depth->setRange(0, (parameter->getActualValue() > 5.0) ? 10.0 - parameter->getActualValue() : parameter->getActualValue(), 0.1);
    }
    
    if (parameter != nullptr) {
        parameter->setValueNotifyingHost(parameter->calculateValue(slider->getValue()));
    }
}
   
void Mu45effectAudioProcessorEditor::timerCallback()
{
	drywet->setValue(processor.wetDryUParam->getActualValue(), dontSendNotification);
	feedback->setValue(processor.feedbackUParam->getActualValue(), dontSendNotification);
	depth->setValue(processor.depthUParam->getActualValue(), dontSendNotification);
	rate->setValue(processor.rateUParam->getActualValue(), dontSendNotification);
	delay->setValue(processor.delayUParam->getActualValue(), dontSendNotification);
	depth->setRange(0, (processor.delayUParam->getActualValue() > 5.0) ? 10.0 - processor.delayUParam->getActualValue() : processor.delayUParam->getActualValue(), 0.1);
}



