/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================

// PluginEditor Constructor:
Mu45effectAudioProcessorEditor::Mu45effectAudioProcessorEditor (Mu45effectAudioProcessor& p)
    : AudioProcessorEditor (&p), processor (p)
{    
	addAndMakeVisible (Threshold = new Slider ("Threshold"));
    Threshold->setRange (-66, 6, 0.1);
    Threshold->setSliderStyle (Slider::LinearBarVertical);
    Threshold->setTextBoxStyle (Slider::TextBoxBelow, false, 80, 50);
	Threshold->setTextValueSuffix("dB");
    Threshold->addListener (this);

    addAndMakeVisible (Ratio = new Slider ("Ratio"));
    Ratio->setRange (1, 15, 0.01);
    Ratio->setSliderStyle (Slider::Rotary);
    Ratio->setTextBoxStyle (Slider::TextBoxBelow, false, 80, 20);
    Ratio->addListener (this);

    addAndMakeVisible (Attack = new Slider ("Atack"));
    Attack->setRange (0.001, 1, 0.001);
    Attack->setSliderStyle (Slider::Rotary);
    Attack->setTextBoxStyle (Slider::TextBoxBelow, false, 80, 20);
	Attack->setTextValueSuffix("s");
    Attack->addListener (this);

    addAndMakeVisible (Release = new Slider ("Release"));
    Release->setRange (0.01, 3, 0.01);
    Release->setSliderStyle (Slider::Rotary);
    Release->setTextBoxStyle (Slider::TextBoxBelow, false, 80, 20);
	Release->setTextValueSuffix("s");
    Release->addListener (this);

    addAndMakeVisible (Threshold2 = new Label ("Threshold",
                                               TRANS("Threshold")));
    Threshold2->setFont (Font (15.00f, Font::plain));
    Threshold2->setJustificationType (Justification::centredLeft);
    Threshold2->setEditable (false, false, false);
    Threshold2->setColour (TextEditor::textColourId, Colours::black);
    Threshold2->setColour (TextEditor::backgroundColourId, Colour (0x00000000));

    addAndMakeVisible (Ratio2 = new Label ("Ratio",
                                           TRANS("Ratio")));
    Ratio2->setFont (Font (15.00f, Font::plain));
    Ratio2->setJustificationType (Justification::centredLeft);
    Ratio2->setEditable (false, false, false);
    Ratio2->setColour (TextEditor::textColourId, Colours::black);
    Ratio2->setColour (TextEditor::backgroundColourId, Colour (0x00000000));

    addAndMakeVisible (Attack2 = new Label ("Attack",
                                            TRANS("Attack")));
    Attack2->setFont (Font (15.00f, Font::plain));
    Attack2->setJustificationType (Justification::centredLeft);
    Attack2->setEditable (false, false, false);
    Attack2->setColour (TextEditor::textColourId, Colours::black);
    Attack2->setColour (TextEditor::backgroundColourId, Colour (0x00000000));

    addAndMakeVisible (Release2 = new Label ("Release",
                                             TRANS("Release")));
    Release2->setFont (Font (15.00f, Font::plain));
    Release2->setJustificationType (Justification::centredLeft);
    Release2->setEditable (false, false, false);
    Release2->setColour (TextEditor::textColourId, Colours::black);
    Release2->setColour (TextEditor::backgroundColourId, Colour (0x00000000));

    
    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be.
    setSize (400, 300);
    startTimer(100);    // This sets how often (in msec) the timerCallback() gets called.
}

Mu45effectAudioProcessorEditor::~Mu45effectAudioProcessorEditor()
{
}

//==============================================================================
void Mu45effectAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colours::white);

    g.setColour (Colours::black);
    g.setFont (15.0f);
}

void Mu45effectAudioProcessorEditor::resized()
{  
    Threshold->setBounds (40, 40, 50, 150);
    Ratio->setBounds (120, 64, 50, 100);
    Attack->setBounds (200, 64, 50, 100);
    Release->setBounds (280, 64, 50, 100);
    Threshold2->setBounds (32, 16, 75, 24);
    Ratio2->setBounds (124, 56, 45, 24);
    Attack2->setBounds (200, 56, 50, 24);
    Release2->setBounds (276, 56, 60, 24);
}

//Mu45: This gets called whenever the user moves a slider
void Mu45effectAudioProcessorEditor::sliderValueChanged(Slider* slider)
{
    PluginParameter* parameter = nullptr;
       
    if (slider == Threshold)
    {
		parameter = processor.thresholdUParam;
    }
    else if (slider == Ratio)
    {
		parameter = processor.ratioUParam;
    }
    else if (slider == Attack)
    {
		parameter = processor.attackUParam;
    }
    else if (slider == Release)
    {
		parameter = processor.releaseUParam;
    }
    
    if (parameter != nullptr) {
        parameter->setValueNotifyingHost(parameter->calculateValue(slider->getValue()));
    }
}

    
    //Mu45:  This gets called every N msec so that sliders can update their value if the host changed them using parameter automation
void Mu45effectAudioProcessorEditor::timerCallback()
{
	Threshold->setValue(processor.thresholdUParam->getActualValue(), dontSendNotification);
	Ratio->setValue(processor.ratioUParam->getActualValue(), dontSendNotification);
	Attack->setValue(processor.attackUParam->getActualValue(), dontSendNotification);
	Release->setValue(processor.releaseUParam->getActualValue(), dontSendNotification);
}



