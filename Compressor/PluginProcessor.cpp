/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
Mu45effectAudioProcessor::Mu45effectAudioProcessor()
{
	addParameter(thresholdUParam = new PluginParameter("threshold",     // parameterId
		0.0,         // actualDefaultValue
		-66.0,         // actualMinimum
		6.0,        // actualMaximum
		"Threshold",    // parameterName
		"dB"));      // parameterLabel (can be String::empty)

	addParameter(ratioUParam = new PluginParameter("ratio",     // parameterId
		1.0,         // actualDefaultValue
		1.0,         // actualMinimum
		15.0,        // actualMaximum
		"Ratio",    // parameterName
		""));      // parameterLabel (can be String::empty)

	addParameter(attackUParam = new PluginParameter("attack",     // parameterId
		0.5,         // actualDefaultValue
		0.001,         // actualMinimum
		1.0,        // actualMaximum
		"Attack",    // parameterName
		"s"));      // parameterLabel (can be String::empty)

	addParameter(releaseUParam = new PluginParameter("release",     // parameterId
		1.5,         // actualDefaultValue
		0.01,         // actualMinimum
		3.0,        // actualMaximum
		"Release",    // parameterName
		"s"));      // parameterLabel (can be String::empty)
    
}

Mu45effectAudioProcessor::~Mu45effectAudioProcessor()
{
}

//==============================================================================
const String Mu45effectAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

bool Mu45effectAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool Mu45effectAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool Mu45effectAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double Mu45effectAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int Mu45effectAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int Mu45effectAudioProcessor::getCurrentProgram()
{
    return 0;
}

void Mu45effectAudioProcessor::setCurrentProgram (int index)
{
}

const String Mu45effectAudioProcessor::getProgramName (int index)
{
    return String();
}

void Mu45effectAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
//Mu45: The following methods are where we will do most of our work
//==============================================================================

void Mu45effectAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
	fs = sampleRate;
	lSq = 0.0;
	rSq = 0.0;
	lMean = 0.0;
	rMean = 0.0;
	mono = 0.0;
	monodB = 0.0;
	cdB = 0.0;
	bDyn = 0.0;
	cdBdyn = 0.0;
	cLin = 0.0;

}

void Mu45effectAudioProcessor::releaseResources()
{

}

//Mu45: This function is a good place to calculate algorithm parameter values from user parameter values.
void Mu45effectAudioProcessor::calcAlgorithmParams()
{
	thresholdAParam = thresholdUParam->getActualValue();
	ratioAParam = ratioUParam->getActualValue();
	attackAParam = attackUParam->getActualValue();
	releaseAParam = releaseUParam->getActualValue();

	A = 1 - exp(-1 / (attackAParam * fs));
	R = 1 - exp(-1 / (releaseAParam * fs));

	tau = 1 - 1 / exp(1);
	b = 1 - exp(-2.2 / (tau*fs));
}


// Mu45: This is where audio actually gets changed!
void Mu45effectAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    const int totalNumInputChannels  = getTotalNumInputChannels();
    const int totalNumOutputChannels = getTotalNumOutputChannels();
    
    // In case we have more outputs than inputs, this code clears any output
    // channels that didn't contain input data, (because these aren't
    // guaranteed to be empty - they may contain garbage).
    // This is here to avoid people getting screaming feedback
    // when they first compile a plugin, but obviously you don't need to keep
    // this code if your algorithm always overwrites all the output channels.
    for (int i = totalNumInputChannels; i < totalNumOutputChannels; ++i)
        buffer.clear (i, 0, buffer.getNumSamples());
    
    //Mu45: Before we process a buffer, update the algorithm params!
    calcAlgorithmParams();
    
    // This version assumes we always have 2 channels
    float* left = buffer.getWritePointer (0);
    float* right = buffer.getWritePointer (1);
    const int numSamps = buffer.getNumSamples();
	
   
    //Mu45: This is the "inner loop" where we calculate each output sample
    for (int samp = 0; samp < numSamps; samp++)
    {
		//Square 
		lSq = left[samp] * left[samp];
		rSq = right[samp] * right[samp];

		//Mean
		lMean += b * (lSq - lMean);
		rMean += b * (rSq - rMean);

		//Root
		mono = sqrt(0.5 * (lMean + rMean));

		//Convert to dB
		monodB = 20 * log10(mono); 

		//Gain Computer
		cdB = (monodB > thresholdAParam) ? ((1 / ratioAParam) - 1) * (monodB - thresholdAParam) : 0.0; 

		//Gain Dynamics
		//cdBdyn = isinf(cdBdyn) ? 0.0 : cdBdyn;
		bDyn = (cdBdyn > cdB) ? A : R;
		cdBdyn += bDyn * (cdB - cdBdyn);

		//Convert to linear
		cLin = powf(10, cdBdyn / 20);

		left[samp] = cLin * left[samp];
		right[samp] = cLin * right[samp];
    }
}

//==============================================================================
bool Mu45effectAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* Mu45effectAudioProcessor::createEditor()
{
    return new Mu45effectAudioProcessorEditor (*this);
}

//==============================================================================
void Mu45effectAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void Mu45effectAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new Mu45effectAudioProcessor();
}
