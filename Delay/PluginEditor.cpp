/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================

// PluginEditor Constructor:
Mu45effectAudioProcessorEditor::Mu45effectAudioProcessorEditor (Mu45effectAudioProcessor& p)
    : AudioProcessorEditor (&p), processor (p)
{
    PluginParameter* param;
    
    //Mu45Param: Create a slider for each User Param
    /*param = processor.volumeUParam;     // get the corresponding parameter from the PluginProcessor
    volumeSlider = new Slider ("Volume Slider");
    volumeSlider->setRange(param->getActualMinimum(),
                           param->getActualMaximum(),
                           0.5);        //Mu45:  step size
    volumeSlider->setSliderStyle(Slider::LinearBarVertical);
    volumeSlider->setTextValueSuffix(param->getLabel());
    volumeSlider->setTextBoxStyle(Slider::TextBoxBelow, false, 60, 20);
    volumeSlider->addListener (this);   // this is important!
    addAndMakeVisible(volumeSlider);    //so is this!*/
    
    //Mu45Param: You can also create a label for your slider if you like
    /*volumeLabel = new Label("Volume Label", param->getName(10));
    volumeLabel->attachToComponent(volumeSlider, false);
    //volumeLabel->setFont(Font(12.0));
    addAndMakeVisible(volumeLabel);*/
    
    addAndMakeVisible (wetDrySlider = new Slider ("Wet / Dry"));
    wetDrySlider->setRange (0, 100, 1);
    wetDrySlider->setSliderStyle (Slider::Rotary);
    wetDrySlider->setTextBoxStyle (Slider::TextBoxBelow, false, 80, 20);
	wetDrySlider->setTextValueSuffix("%");
    wetDrySlider->addListener (this);

    addAndMakeVisible (feedbackSlider = new Slider ("Feedback"));
    feedbackSlider->setRange (0, 95, 1);
    feedbackSlider->setSliderStyle (Slider::Rotary);
    feedbackSlider->setTextBoxStyle (Slider::TextBoxBelow, false, 80, 20);
	feedbackSlider->setTextValueSuffix("%");
    feedbackSlider->addListener (this);

    addAndMakeVisible (delaySlider = new Slider ("Delay"));
    delaySlider->setRange (0, 1000, 1);
    delaySlider->setSliderStyle (Slider::LinearBar);
    delaySlider->setTextBoxStyle (Slider::TextBoxBelow, false, 80, 20);
	delaySlider->setTextValueSuffix("ms");
    delaySlider->addListener (this);

    addAndMakeVisible (filterBox = new ComboBox ("Feedback Filter Type"));
    filterBox->setEditableText (false);
    filterBox->setJustificationType (Justification::centredLeft);
    filterBox->setTextWhenNothingSelected ("None");
    filterBox->setTextWhenNoChoicesAvailable (TRANS("(no choices)"));
    filterBox->addItem (TRANS("Low pass"), 1);
    filterBox->addItem (TRANS("High pass"), 2);
    filterBox->addItem (TRANS("Band pass"), 3);
    filterBox->addItem (TRANS("None"), 4);
    filterBox->addListener (this);

    addAndMakeVisible (label = new Label ("new label",
                                          TRANS("Wet / Dry")));
    label->setFont (Font (15.00f, Font::plain));
    label->setJustificationType (Justification::centredLeft);
    label->setEditable (false, false, false);
    label->setColour (TextEditor::textColourId, Colours::black);
    label->setColour (TextEditor::backgroundColourId, Colour (0x00000000));

    addAndMakeVisible (label2 = new Label ("new label",
                                           TRANS("Feedback")));
    label2->setFont (Font (15.00f, Font::plain));
    label2->setJustificationType (Justification::centredLeft);
    label2->setEditable (false, false, false);
    label2->setColour (TextEditor::textColourId, Colours::black);
    label2->setColour (TextEditor::backgroundColourId, Colour (0x00000000));

    addAndMakeVisible (label3 = new Label ("new label",
                                           TRANS("Feedback Filter Type")));
    label3->setFont (Font (15.00f, Font::plain));
    label3->setJustificationType (Justification::centredLeft);
    label3->setEditable (false, false, false);
    label3->setColour (TextEditor::textColourId, Colours::black);
    label3->setColour (TextEditor::backgroundColourId, Colour (0x00000000));

    addAndMakeVisible (label4 = new Label ("new label",
                                           TRANS("Delay")));
    label4->setFont (Font (15.00f, Font::plain));
    label4->setJustificationType (Justification::centredLeft);
    label4->setEditable (false, false, false);
    label4->setColour (TextEditor::textColourId, Colours::black);
    label4->setColour (TextEditor::backgroundColourId, Colour (0x00000000));
    
    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be.
    setSize (400, 300);
    startTimer(100);    // This sets how often (in msec) the timerCallback() gets called.
}

Mu45effectAudioProcessorEditor::~Mu45effectAudioProcessorEditor()
{
}

//==============================================================================
void Mu45effectAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colours::white);

    g.setColour (Colours::black);
    g.setFont (15.0f);
    //g.drawFittedText ("Hello Mu45!", getLocalBounds(), Justification::centred, 1);
}

void Mu45effectAudioProcessorEditor::resized()
{
    //Mu45Param: Set the location in the GUI for each UI component
    //int w = 50; int h = 200; int x = 20; int y = 60;
    //volumeSlider->setBounds(x, y, w, h); 
    
    wetDrySlider->setBounds (32, 24, 150, 75);
    feedbackSlider->setBounds (176, 24, 150, 75);
    delaySlider->setBounds (80, 224, 216, 24);
    filterBox->setBounds (104, 136, 150, 24);
    label->setBounds (72, 96, 72, 24);
    label2->setBounds (216, 96, 71, 24);
    label3->setBounds (112, 160, 150, 24);
    label4->setBounds (168, 248, 150, 24);
}

//Mu45: This gets called whenever the user moves a slider
void Mu45effectAudioProcessorEditor::sliderValueChanged(Slider* slider)
{
    PluginParameter* parameter = nullptr;
    
    // Mu45Param: make an additional "else if" for each slider
    if (slider == wetDrySlider) {
        parameter = processor.wetDryUParam;
    }
    else if (slider == feedbackSlider) {
        parameter = processor.feedbackUParam;
    }
	else if (slider == delaySlider) {
		parameter = processor.delayUParam;
	}
    
    if (parameter != nullptr) {
        parameter->setValueNotifyingHost(parameter->calculateValue(slider->getValue()));
    }
}

void Mu45effectAudioProcessorEditor::comboBoxChanged (ComboBox* combo)
{
    //[UsercomboBoxChanged_Pre]
    //[/UsercomboBoxChanged_Pre]

	PluginParameter* parameter = nullptr;

    if (combo == filterBox)
    {
		if ((int)filterBox->getSelectedId() == 1)
		{
			processor.filterUParam->setName("Low Pass");
			parameter = processor.filterUParam;
		}
		else if ((int)filterBox->getSelectedId() == 2)
		{
			processor.filterUParam->setName("High Pass");
			parameter = processor.filterUParam;
		}
		else if ((int)filterBox->getSelectedId() == 3)
		{
			processor.filterUParam->setName("Band Pass");
			parameter = processor.filterUParam;
		}
		else
		{
			processor.filterUParam->setName("None");
			parameter = processor.filterUParam;

		}
    }

    //[UsercomboBoxChanged_Post]
    //[/UsercomboBoxChanged_Post]
}

    
    //Mu45:  This gets called every N msec so that sliders can update their value if the host changed them using parameter automation
void Mu45effectAudioProcessorEditor::timerCallback()
{
    //Mu45Param: Update the value of each slider to match the value in the Processor
    //volumeSlider->setValue(processor.volumeUParam->getActualValue(), dontSendNotification);
	wetDrySlider->setValue(processor.wetDryUParam->getActualValue(), dontSendNotification);
	feedbackSlider->setValue(processor.feedbackUParam->getActualValue(), dontSendNotification);
	delaySlider->setValue(processor.delayUParam->getActualValue(), dontSendNotification);
    //someOtherSlider->setValue(processor.someOtherUserParameter->getActualValue(), dontSendNotification);
}



