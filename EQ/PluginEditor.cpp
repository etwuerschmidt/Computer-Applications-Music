/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================

// PluginEditor Constructor:
Mu45effectAudioProcessorEditor::Mu45effectAudioProcessorEditor (Mu45effectAudioProcessor& p)
    : AudioProcessorEditor (&p), processor (p)
{
	PluginParameter* lowShelfFCParam = processor.lowShelfFCUParam;
	PluginParameter* lowShelfGainParam = processor.lowShelfGainUParam;
	PluginParameter* midFCParam = processor.midFCUParam;
	PluginParameter* midGainParam = processor.midGainUParam; 
	PluginParameter* highShelfFCParam = processor.highShelfFCUParam;
	PluginParameter* highShelfGainParam = processor.highShelfGainUParam;
    //*param = processor.UParam;
    
	lowShelfFCSlider = new Slider("Low FC Slider");
	lowShelfFCSlider->setRange(lowShelfFCParam->getActualMinimum(),
		lowShelfFCParam->getActualMaximum(),
		1);        
	lowShelfFCSlider->setSliderStyle(Slider::Rotary);
	lowShelfFCSlider->setTextValueSuffix(lowShelfFCParam->getLabel());
	lowShelfFCSlider->setTextBoxStyle(Slider::TextBoxBelow, false, 60, 20);
	lowShelfFCSlider->addListener(this);   // this is important!
	addAndMakeVisible(lowShelfFCSlider);    //so is this!

	lowShelfGainSlider = new Slider("Low Gain Slider");
	lowShelfGainSlider->setRange(lowShelfGainParam->getActualMinimum(),
		lowShelfGainParam->getActualMaximum(),
		1);        
	lowShelfGainSlider->setSliderStyle(Slider::LinearBarVertical);
	lowShelfGainSlider->setTextValueSuffix(lowShelfGainParam->getLabel());
	lowShelfGainSlider->setTextBoxStyle(Slider::TextBoxBelow, false, 60, 20);
	lowShelfGainSlider->addListener(this);   // this is important!
	addAndMakeVisible(lowShelfGainSlider);    //so is this!


	midFCSlider = new Slider("Mid FC Slider");
	midFCSlider->setRange(midFCParam->getActualMinimum(),
		midFCParam->getActualMaximum(),
		1);
	midFCSlider->setSliderStyle(Slider::Rotary);
	midFCSlider->setTextValueSuffix(midFCParam->getLabel());
	midFCSlider->setTextBoxStyle(Slider::TextBoxBelow, false, 60, 20);
	midFCSlider->addListener(this);   // this is important!
	addAndMakeVisible(midFCSlider);    //so is this!

	midGainSlider = new Slider("Mid Gain Slider");
	midGainSlider->setRange(midGainParam->getActualMinimum(),
		midGainParam->getActualMaximum(),
		1);
	midGainSlider->setSliderStyle(Slider::LinearBarVertical);
	midGainSlider->setTextValueSuffix(midGainParam->getLabel());
	midGainSlider->setTextBoxStyle(Slider::TextBoxBelow, false, 60, 20);
	midGainSlider->addListener(this);   // this is important!
	addAndMakeVisible(midGainSlider);    //so is this!


	highShelfFCSlider = new Slider("High FC Slider");
	highShelfFCSlider->setRange(highShelfFCParam->getActualMinimum(),
		highShelfFCParam->getActualMaximum(),
		1);
	highShelfFCSlider->setSliderStyle(Slider::Rotary);
	highShelfFCSlider->setTextValueSuffix(highShelfFCParam->getLabel());
	highShelfFCSlider->setTextBoxStyle(Slider::TextBoxBelow, false, 60, 20);
	highShelfFCSlider->addListener(this);   // this is important!
	addAndMakeVisible(highShelfFCSlider);    //so is this!

	highShelfGainSlider = new Slider("High Gain Slider");
	highShelfGainSlider->setRange(highShelfGainParam->getActualMinimum(),
		highShelfGainParam->getActualMaximum(),
		1);
	highShelfGainSlider->setSliderStyle(Slider::LinearBarVertical);
	highShelfGainSlider->setTextValueSuffix(highShelfGainParam->getLabel());
	highShelfGainSlider->setTextBoxStyle(Slider::TextBoxBelow, false, 60, 20);
	highShelfGainSlider->addListener(this);   // this is important!
	addAndMakeVisible(highShelfGainSlider);    //so is this!


	lowShelfFCLabel = new Label("Low Cutoff", lowShelfFCParam->getName(15));
	lowShelfFCLabel->attachToComponent(lowShelfFCSlider, false);
	//volumeLabel->setFont(Font(12.0));
	addAndMakeVisible(lowShelfFCLabel);

	lowShelfGainLabel = new Label("Low Gain", lowShelfGainParam->getName(15));
	lowShelfGainLabel->attachToComponent(lowShelfGainSlider, false);
	//volumeLabel->setFont(Font(12.0));
	addAndMakeVisible(lowShelfGainLabel);


	midFCLabel = new Label("Mid Cutoff", midFCParam->getName(15));
	midFCLabel->attachToComponent(midFCSlider, false);
	//volumeLabel->setFont(Font(12.0));
	addAndMakeVisible(midFCLabel);

	midGainLabel = new Label("Mid Gain", midGainParam->getName(15));
	midGainLabel->attachToComponent(midGainSlider, false);
	//volumeLabel->setFont(Font(12.0));
	addAndMakeVisible(midGainLabel);


	highShelfFCLabel = new Label("High Cutoff", highShelfFCParam->getName(15));
	highShelfFCLabel->attachToComponent(highShelfFCSlider, false);
	//volumeLabel->setFont(Font(12.0));
	addAndMakeVisible(highShelfFCLabel);

	highShelfGainLabel = new Label("High Gain", highShelfGainParam->getName(15));
	highShelfGainLabel->attachToComponent(highShelfGainSlider, false);
	//volumeLabel->setFont(Font(12.0));
	addAndMakeVisible(highShelfGainLabel);
    
    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be.
    setSize (400, 300);
    startTimer(100);    // This sets how often (in msec) the timerCallback() gets called.
}

Mu45effectAudioProcessorEditor::~Mu45effectAudioProcessorEditor()
{
}

//==============================================================================
void Mu45effectAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colours::white);

    g.setColour (Colours::black);
    g.setFont (15.0f);
    //g.drawFittedText ("Hello Mu45!", getLocalBounds(), Justification::centred, 1);
}

void Mu45effectAudioProcessorEditor::resized()
{
    //Mu45Param: Set the location in the GUI for each UI component
    int x = 20; int y = 20;
    lowShelfFCSlider->setBounds(x, y, 75, 75);   
	lowShelfGainSlider->setBounds(x, y+100, 75, 150);
	midFCSlider->setBounds(x+100, y, 75, 75);
	midGainSlider->setBounds(x+100, y+100, 75, 150);
	highShelfFCSlider->setBounds(x + 200, y, 75, 75);
	highShelfGainSlider->setBounds(x + 200, y + 100, 75, 150);

}

//Mu45: This gets called whenever the user moves a slider
void Mu45effectAudioProcessorEditor::sliderValueChanged(Slider* slider)
{
    PluginParameter* parameter = nullptr;
    
    // Mu45Param: make an additional "else if" for each slider
    if (slider == lowShelfFCSlider) {
        parameter = processor.lowShelfFCUParam;
    }
    else if (slider == lowShelfGainSlider) {
        parameter = processor.lowShelfGainUParam;
    }
	else if (slider == midFCSlider) {
		parameter = processor.midFCUParam;
	}
	else if (slider == midGainSlider) {
		parameter = processor.midGainUParam;
	}
	else if (slider == highShelfFCSlider) {
		parameter = processor.highShelfFCUParam;
	}
	else if (slider == highShelfGainSlider) {
		parameter = processor.highShelfGainUParam;
	}
    
    if (parameter != nullptr) {
        parameter->setValueNotifyingHost(parameter->calculateValue(slider->getValue()));
    }
}

    
    //Mu45:  This gets called every N msec so that sliders can update their value if the host changed them using parameter automation
void Mu45effectAudioProcessorEditor::timerCallback()
{
    //Mu45Param: Update the value of each slider to match the value in the Processor
    //volumeSlider->setValue(processor.volumeUParam->getActualValue(), dontSendNotification);
	lowShelfFCSlider->setValue(processor.lowShelfFCUParam->getActualValue(), dontSendNotification);
	lowShelfGainSlider->setValue(processor.lowShelfGainUParam->getActualValue(), dontSendNotification);
	midFCSlider->setValue(processor.midFCUParam->getActualValue(), dontSendNotification);
	midGainSlider->setValue(processor.midGainUParam->getActualValue(), dontSendNotification);
	highShelfFCSlider->setValue(processor.highShelfFCUParam->getActualValue(), dontSendNotification);
	highShelfGainSlider->setValue(processor.highShelfGainUParam->getActualValue(), dontSendNotification);
    //someOtherSlider->setValue(processor.someOtherUserParameter->getActualValue(), dontSendNotification);
}



