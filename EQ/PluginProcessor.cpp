/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
Mu45effectAudioProcessor::Mu45effectAudioProcessor()
{
    //Frequency ranges chosen based on information from http://www.teachmeaudio.com/mixing/techniques/audio-spectrum
    addParameter( lowShelfFCUParam = new PluginParameter("Low Shelf Frequency Cutoff",     // parameterId
                                        250.0,         // actualDefaultValue
                                        0.0,         // actualMinimum
                                        500.0,        // actualMaximum
                                        "Low Cutoff",    // parameterName
                                        "Hz"));      // parameterLabel (can be String::empty)

	addParameter(lowShelfGainUParam = new PluginParameter("Low Shelf Gain",     // parameterId
		0.0,         // actualDefaultValue
		-30.0,         // actualMinimum
		30.0,        // actualMaximum
		"Low Gain",    // parameterName
		"dB"));      // parameterLabel (can be String::empty)


	addParameter(midFCUParam = new PluginParameter("Mid Frequency Cutoff",     // parameterId
		3000.0,         // actualDefaultValue
		500.0,         // actualMinimum
		4000.0,        // actualMaximum
		"Mid Cutoff",    // parameterName
		"Hz"));      // parameterLabel (can be String::empty)

	addParameter(midGainUParam = new PluginParameter("Mid Gain",     // parameterId
		0.0,         // actualDefaultValue
		-30.0,         // actualMinimum
		30.0,        // actualMaximum
		"Mid Gain",    // parameterName
		"dB"));      // parameterLabel (can be String::empty)


	addParameter(highShelfFCUParam = new PluginParameter("High Shelf Frequency Cutoff",     // parameterId
		13000.0,         // actualDefaultValue
		4000.0,         // actualMinimum
		22000.0,        // actualMaximum
		"High Cutoff",    // parameterName
		"Hz"));      // parameterLabel (can be String::empty)

	addParameter(highShelfGainUParam = new PluginParameter("High Shelf Gain",     // parameterId
		0.0,         // actualDefaultValue
		-30.0,         // actualMinimum
		30.0,        // actualMaximum
		"High Gain",    // parameterName
		"dB"));      // parameterLabel (can be String::empty)
    
}

Mu45effectAudioProcessor::~Mu45effectAudioProcessor()
{
}

//==============================================================================
const String Mu45effectAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

bool Mu45effectAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool Mu45effectAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool Mu45effectAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double Mu45effectAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int Mu45effectAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int Mu45effectAudioProcessor::getCurrentProgram()
{
    return 0;
}

void Mu45effectAudioProcessor::setCurrentProgram (int index)
{
}

const String Mu45effectAudioProcessor::getProgramName (int index)
{
    return String();
}

void Mu45effectAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
//Mu45: The following methods are where we will do most of our work
//==============================================================================

void Mu45effectAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    //Mu45: Do any initial calculations here that require the sample rate
    
    //Mu45: Initialize any member variables
	fs = sampleRate;

}

void Mu45effectAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
    //Mu45: You may need to release memory here.
}

//Mu45: This function is a good place to calculate algorithm parameter values from user parameter values.
void Mu45effectAudioProcessor::calcAlgorithmParams()
{
	float lowShelfCoeffs[5];
	lowShelfFCAParam = lowShelfFCUParam->getActualValue();
	lowShelfGainAParam = lowShelfGainUParam->getActualValue();
	Mu45FilterCalc::calcCoeffsLowShelf(lowShelfCoeffs, lowShelfFCAParam, lowShelfGainAParam, fs);
	lowShelfFilterL.setCoefficients(lowShelfCoeffs[0], lowShelfCoeffs[1], lowShelfCoeffs[2], lowShelfCoeffs[3], lowShelfCoeffs[4]);
	lowShelfFilterR.setCoefficients(lowShelfCoeffs[0], lowShelfCoeffs[1], lowShelfCoeffs[2], lowShelfCoeffs[3], lowShelfCoeffs[4]);


	float midCoeffs[5];
	midFCAParam = midFCUParam->getActualValue();
	midGainAParam = midGainUParam->getActualValue();
	Mu45FilterCalc::calcCoeffsPeak(midCoeffs, midFCAParam, midGainAParam, midFCAParam / 100, fs);
	midFilterL.setCoefficients(midCoeffs[0], midCoeffs[1], midCoeffs[2], midCoeffs[3], midCoeffs[4]);
	midFilterR.setCoefficients(midCoeffs[0], midCoeffs[1], midCoeffs[2], midCoeffs[3], midCoeffs[4]);


	float highShelfCoeffs[5];
	highShelfFCAParam = highShelfFCUParam->getActualValue();
	highShelfGainAParam = highShelfGainUParam->getActualValue();
	Mu45FilterCalc::calcCoeffsHighShelf(highShelfCoeffs, highShelfFCAParam, highShelfGainAParam, fs);
	highShelfFilterL.setCoefficients(highShelfCoeffs[0], highShelfCoeffs[1], highShelfCoeffs[2], highShelfCoeffs[3], highShelfCoeffs[4]);
	highShelfFilterR.setCoefficients(highShelfCoeffs[0], highShelfCoeffs[1], highShelfCoeffs[2], highShelfCoeffs[3], highShelfCoeffs[4]);

}


// Mu45: This is where audio actually gets changed!
void Mu45effectAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    const int totalNumInputChannels  = getTotalNumInputChannels();
    const int totalNumOutputChannels = getTotalNumOutputChannels();
    
    // In case we have more outputs than inputs, this code clears any output
    // channels that didn't contain input data, (because these aren't
    // guaranteed to be empty - they may contain garbage).
    // This is here to avoid people getting screaming feedback
    // when they first compile a plugin, but obviously you don't need to keep
    // this code if your algorithm always overwrites all the output channels.
    for (int i = totalNumInputChannels; i < totalNumOutputChannels; ++i)
        buffer.clear (i, 0, buffer.getNumSamples());
    
    //Mu45: Before we process a buffer, update the algorithm params!
    calcAlgorithmParams();
    
    // This version assumes we always have 2 channels
    float* left = buffer.getWritePointer (0);
    float* right = buffer.getWritePointer (1);
    const int numSamps = buffer.getNumSamples();
    
    //Mu45: This is the "inner loop" where we calculate each output sample
    for (int samp = 0; samp < numSamps; samp++)
    {
		left[samp] = lowShelfFilterL.tick(left[samp]);
		right[samp] = lowShelfFilterR.tick(right[samp]);

		left[samp] = midFilterL.tick(left[samp]);
		right[samp] = midFilterR.tick(right[samp]);

		left[samp] = highShelfFilterL.tick(left[samp]);
		right[samp] = highShelfFilterR.tick(right[samp]);
    }
}

//==============================================================================
bool Mu45effectAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* Mu45effectAudioProcessor::createEditor()
{
    return new Mu45effectAudioProcessorEditor (*this);
}

//==============================================================================
void Mu45effectAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void Mu45effectAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new Mu45effectAudioProcessor();
}
